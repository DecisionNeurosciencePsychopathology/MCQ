row.names(ACsuihx)<-NULL
#Merge and get vars
suihxrc %>% group_by(masterdemoid) %>% filter(row_number()==1)->suihxrc
View(suihxrc)
data.frame(masterdemoid=suihxrc$masterdemoid,firstatt=suihxrc$firstattrc, maxleth=suihxrc$maxlethrc,
mldate=suihxrc$mldate)->suihxrc
data.frame(masterdemoid=ACsuihx$masterdemoid,firstatt=ACsuihx$ACfirstatt, maxleth=ACsuihx$ACmaxleth,
mldate=ACsuihx$oldml)->ACsuihx
bsrc.getSUIHX_index<-function(protocol=protocol.cur,suicide_formname="suicide_history"){
metadata<-bsrc.getform(protocol = protocol,formname = suicide_formname,aggressivecog = F,mod = F,grabnewinfo = T,batch_size=1000L)
sui_names<-names(metadata)
index_df<-data.frame(names=sui_names,rxsim1=gsub(".*_(at[0-9]*$)",'\\1',gsub("___.*","",sui_names),perl = T),stringsAsFactors = F)
index_df$SingleEntry<-index_df$names==index_df$rxsim1
index_df$is_checkbox<-grepl("___",index_df$names)
index_df$root_names<-index_df$names;index_df$checkbox_names<-NA
index_df$root_names[index_df$is_checkbox]<-gsub("___.*$","",index_df$root_names[index_df$is_checkbox])
index_df$checkbox_names[index_df$is_checkbox]<-gsub("___.*$","",index_df$root_names[index_df$is_checkbox])
index_df$root_names<-gsub("_at[0-9]*$","\\1",index_df$root_names)
return(index_df)
}
index_df<-bsrc.getSUIHX_index(protocol = ptcs$protect,suicide_formname = "ongoing_suicide_hx_lethality")
sux_df<-bsrc.getform(protocol = ptcs$protect,grabnewinfo = T,formname = "ongoing_suicide_hx_lethality",batch_size=1000L)
melt_sux_df<-melt(sux_df,id.vars=c(index_df$names[index_df$SingleEntry]))
meltxa<-cbind(melt_sux_df,index_df[match(as.character(melt_sux_df$variable),index_df$names),])
meltxa<-meltxa[!meltxa$is_checkbox,]
reshape_sux<-reshape2::dcast(meltxa,value.var = "value",formula = registration_redcapid+rxsim1~root_names)
reshape_sux->suihx
suihx$rxsim1<-NULL
suihx$sahx_describe<-NULL
suihx %>% filter(!is.na(sahx_lr)| !is.na(sahx_sadate))->suihx
ymd(suihx$sahx_sadate)->suihx$sahx_sadate
#Date of first attempt and highest lethality
suihx %>% group_by(registration_redcapid) %>% mutate(firstattrc=min(na.omit(sahx_sadate)))->suihx
suihx %>% group_by(registration_redcapid) %>% mutate(maxlethrc=max(na.omit(sahx_lr)))->suihx
suihx[which(suihx$sahx_lr==suihx$sahx_lr),c("registration_redcapid","sahx_sadate")]->mldates
mldates[!duplicated(mldates$registration_redcapid),]->mldates
as.data.frame(mldates)->mldates
mldates$sahx_sadate[match(suihx$registration_redcapid, mldates$registration_redcapid)]->suihx$mldate
suihx[c(1,4,5,6)]->suihx
#Access suicide hx at followups
negout<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_NEGOUT.csv")
negout[c(1,9,10,12,13,15, 20:23)]->negout
#fix dates
mdy(negout$DATE1)->negout$DATE1
mdy(negout$DATE2)->negout$DATE2
mdy(negout$DATE3)->negout$DATE3
mdy(negout$ATTDATE)->negout$ATTDATE
mdy(negout$ATTDATE2)->negout$ATTDATE2
mdy(negout$ATTDATE3)->negout$ATTDATE3
mdy(negout$ATTDATE4)->negout$ATTDATE4
#gather dates
gather(negout, key="Att", value = "Date",-ID, -SUI1, -SUI2)->negout
negout[-4]->negout
negout %>% group_by(ID) %>% mutate(firstattfu=min(na.omit(Date)))->negout
#gather lethalities
gather(negout, key = "Att", value="Lethality",-ID, -Date,-firstattfu)->negout
suique[which(negout$Lethality>9),"Lethality"]<-NA
negout %>% group_by(ID) %>% mutate(maxlethfu=max(na.omit(Lethality)))->negout
negout[which(negout$maxlethfu<0),"maxlethfu"]<-NA
negout[which(negout$maxlethfu==negout$Lethality),c("ID","Date")]->oldmldates
oldmldates[!duplicated(oldmldates$ID),]->oldmldates
oldmldates$Date[match(negout$ID, oldmldates$ID)]->negout$oldmldate
negout[-c(2,4,5)]->negout
#Suicide hx at baseline
suique<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SQUEST.csv")
suique[c(1,14,16,18,20,22,23,25,26,28,29,31,32,34,35)]->suique
#fix dates
mdy(suique$MRATTMPT)->suique$MRATTMPT
mdy(suique$MLDATE)->suique$MLDATE
mdy(suique$DATE1)->suique$DATE1
mdy(suique$DATE2)->suique$DATE2
mdy(suique$DATE3)->suique$DATE3
mdy(suique$DATE4)->suique$DATE4
mdy(suique$DATE5)->suique$DATE5
#gather dates
gather(suique, key="Att", value="Date",-ID, -LETHMR,-LETHML,-LETH1,-LETH2,-LETH3,-LETH4,-LETH5)->suique
suique[-9]->suique
#gather lethality
gather(suique, key="Att", value="Lethality", -ID, -Date)->suique
suique[-3]->suique
suique[which(suique$Lethality>9),"Lethality"]<-NA
#First att and max leth
suique %>% group_by(ID) %>% mutate(maxlethbl=max(na.omit(Lethality)))->suique
suique[which(suique$maxlethbl<0),"maxlethbl"]<-NA
suique %>% group_by(ID)%>% mutate(firstattbl=min(na.omit(Date)))->suique
suique[which(suique$maxlethbl==suique$Lethality),c("ID","Date")]->oldmldates2
oldmldates2[!duplicated(oldmldates2$ID),]->oldmldates2
oldmldates2$Date[match(suique$ID, oldmldates2$ID)]->suique$oldmldate
suique[-c(2,3)]->suique
#Combine bl and fu in Access
rbind(negout,suique)->ACsuihx
gather(ACsuihx, key="key", value="lethality",-ID, -firstattfu,-firstattbl,-oldmldate)->ACsuihx
gather(ACsuihx,key="key2", value="date",-ID, -key,-lethality, -oldmldate)->ACsuihx
ACsuihx %>% group_by(ID) %>% mutate(ACmaxleth=max(na.omit(lethality)))->ACsuihx
ACsuihx[which(ACsuihx$ACmaxleth<0),"ACmaxleth"]<-NA
ACsuihx %>% group_by(ID) %>% mutate(ACfirstatt=min(na.omit(date)))->ACsuihx
ACsuihx[which(ACsuihx$ACmaxleth==ACsuihx$lethality),c("ID","oldmldate")]->oldml
oldml[!duplicated(oldml$ID),]->oldml
oldml$oldmldate[match(ACsuihx$ID, oldml$ID)]->ACsuihx$oldml
ACsuihx[c(1,7:9)]->ACsuihx
#Fix IDs on both forms
suihx->suihxrc
as.data.frame(suihxrc)->suihxrc
bsrc.findid(suihxrc,idmap = idmap,id.var = "registration_redcapid")->suihxrc
suihxrc[c(2,3,4)]->suihxrc
ACsuihx %>% group_by(ID) %>% filter(row_number()==1)->ACsuihx
as.data.frame(ACsuihx)->ACsuihx
as.data.frame(bsrc.findid(ACsuihx,idmap = idmap,id.var = "ID"))->ACsuihx
ACsuihx[which(ACsuihx$ifexist==T),]->ACsuihx
ACsuihx[c(2,3,4)]->ACsuihx
row.names(ACsuihx)<-NULL
#Merge and get vars
suihxrc %>% group_by(masterdemoid) %>% filter(row_number()==1)->suihxrc
bsrc.getSUIHX_index<-function(protocol=protocol.cur,suicide_formname="suicide_history"){
metadata<-bsrc.getform(protocol = protocol,formname = suicide_formname,aggressivecog = F,mod = F,grabnewinfo = T,batch_size=1000L)
sui_names<-names(metadata)
index_df<-data.frame(names=sui_names,rxsim1=gsub(".*_(at[0-9]*$)",'\\1',gsub("___.*","",sui_names),perl = T),stringsAsFactors = F)
index_df$SingleEntry<-index_df$names==index_df$rxsim1
index_df$is_checkbox<-grepl("___",index_df$names)
index_df$root_names<-index_df$names;index_df$checkbox_names<-NA
index_df$root_names[index_df$is_checkbox]<-gsub("___.*$","",index_df$root_names[index_df$is_checkbox])
index_df$checkbox_names[index_df$is_checkbox]<-gsub("___.*$","",index_df$root_names[index_df$is_checkbox])
index_df$root_names<-gsub("_at[0-9]*$","\\1",index_df$root_names)
return(index_df)
}
index_df<-bsrc.getSUIHX_index(protocol = ptcs$protect,suicide_formname = "ongoing_suicide_hx_lethality")
sux_df<-bsrc.getform(protocol = ptcs$protect,grabnewinfo = T,formname = "ongoing_suicide_hx_lethality",batch_size=1000L)
melt_sux_df<-melt(sux_df,id.vars=c(index_df$names[index_df$SingleEntry]))
meltxa<-cbind(melt_sux_df,index_df[match(as.character(melt_sux_df$variable),index_df$names),])
meltxa<-meltxa[!meltxa$is_checkbox,]
reshape_sux<-reshape2::dcast(meltxa,value.var = "value",formula = registration_redcapid+rxsim1~root_names)
reshape_sux->suihx
suihx$rxsim1<-NULL
suihx$sahx_describe<-NULL
suihx %>% filter(!is.na(sahx_lr)| !is.na(sahx_sadate))->suihx
ymd(suihx$sahx_sadate)->suihx$sahx_sadate
#Date of first attempt and highest lethality
suihx %>% group_by(registration_redcapid) %>% mutate(firstattrc=min(na.omit(sahx_sadate)))->suihx
suihx %>% group_by(registration_redcapid) %>% mutate(maxlethrc=max(na.omit(sahx_lr)))->suihx
suihx[which(suihx$sahx_lr==suihx$sahx_lr),c("registration_redcapid","sahx_sadate")]->mldates
mldates[!duplicated(mldates$registration_redcapid),]->mldates
as.data.frame(mldates)->mldates
mldates$sahx_sadate[match(suihx$registration_redcapid, mldates$registration_redcapid)]->suihx$mldate
View(suihx)
suihx[c(1,4,5,6)]->suihx
#Fix IDs on both forms
suihx->suihxrc
as.data.frame(suihxrc)->suihxrc
bsrc.findid(suihxrc,idmap = idmap,id.var = "registration_redcapid")->suihxrc
ACsuihx[c(2:5)]->ACsuihx
suihxrc[c(2:5)]->suihxrc
negout<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_NEGOUT.csv")
negout[c(1,9,10,12,13,15, 20:23)]->negout
#fix dates
mdy(negout$DATE1)->negout$DATE1
mdy(negout$DATE2)->negout$DATE2
mdy(negout$DATE3)->negout$DATE3
mdy(negout$ATTDATE)->negout$ATTDATE
mdy(negout$ATTDATE2)->negout$ATTDATE2
mdy(negout$ATTDATE3)->negout$ATTDATE3
mdy(negout$ATTDATE4)->negout$ATTDATE4
#gather dates
gather(negout, key="Att", value = "Date",-ID, -SUI1, -SUI2)->negout
negout[-4]->negout
negout %>% group_by(ID) %>% mutate(firstattfu=min(na.omit(Date)))->negout
#gather lethalities
gather(negout, key = "Att", value="Lethality",-ID, -Date,-firstattfu)->negout
suique[which(negout$Lethality>9),"Lethality"]<-NA
negout %>% group_by(ID) %>% mutate(maxlethfu=max(na.omit(Lethality)))->negout
negout[which(negout$maxlethfu<0),"maxlethfu"]<-NA
negout[which(negout$maxlethfu==negout$Lethality),c("ID","Date")]->oldmldates
oldmldates[!duplicated(oldmldates$ID),]->oldmldates
oldmldates$Date[match(negout$ID, oldmldates$ID)]->negout$oldmldate
negout[-c(2,4,5)]->negout
#Suicide hx at baseline
suique<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SQUEST.csv")
suique[c(1,14,16,18,20,22,23,25,26,28,29,31,32,34,35)]->suique
#fix dates
mdy(suique$MRATTMPT)->suique$MRATTMPT
mdy(suique$MLDATE)->suique$MLDATE
mdy(suique$DATE1)->suique$DATE1
mdy(suique$DATE2)->suique$DATE2
mdy(suique$DATE3)->suique$DATE3
mdy(suique$DATE4)->suique$DATE4
mdy(suique$DATE5)->suique$DATE5
#gather dates
gather(suique, key="Att", value="Date",-ID, -LETHMR,-LETHML,-LETH1,-LETH2,-LETH3,-LETH4,-LETH5)->suique
suique[-9]->suique
#gather lethality
gather(suique, key="Att", value="Lethality", -ID, -Date)->suique
suique[-3]->suique
suique[which(suique$Lethality>9),"Lethality"]<-NA
#First att and max leth
suique %>% group_by(ID) %>% mutate(maxlethbl=max(na.omit(Lethality)))->suique
suique[which(suique$maxlethbl<0),"maxlethbl"]<-NA
suique %>% group_by(ID)%>% mutate(firstattbl=min(na.omit(Date)))->suique
suique[which(suique$maxlethbl==suique$Lethality),c("ID","Date")]->oldmldates2
oldmldates2[!duplicated(oldmldates2$ID),]->oldmldates2
oldmldates2$Date[match(suique$ID, oldmldates2$ID)]->suique$oldmldate
suique[-c(2,3)]->suique
#Combine bl and fu in Access
rbind(negout,suique)->ACsuihx
gather(ACsuihx, key="key", value="lethality",-ID, -firstattfu,-firstattbl,-oldmldate)->ACsuihx
gather(ACsuihx,key="key2", value="date",-ID, -key,-lethality, -oldmldate)->ACsuihx
ACsuihx %>% group_by(ID) %>% mutate(ACmaxleth=max(na.omit(lethality)))->ACsuihx
ACsuihx[which(ACsuihx$ACmaxleth<0),"ACmaxleth"]<-NA
ACsuihx %>% group_by(ID) %>% mutate(ACfirstatt=min(na.omit(date)))->ACsuihx
ACsuihx[which(ACsuihx$ACmaxleth==ACsuihx$lethality),c("ID","oldmldate")]->oldml
oldml[!duplicated(oldml$ID),]->oldml
oldml$oldmldate[match(ACsuihx$ID, oldml$ID)]->ACsuihx$oldml
ACsuihx[c(1,7:9)]->ACsuihx
#Fix IDs on both forms
suihx->suihxrc
as.data.frame(suihxrc)->suihxrc
bsrc.findid(suihxrc,idmap = idmap,id.var = "registration_redcapid")->suihxrc
suihxrc[c(2:5)]->suihxrc
ACsuihx %>% group_by(ID) %>% filter(row_number()==1)->ACsuihx
as.data.frame(ACsuihx)->ACsuihx
as.data.frame(bsrc.findid(ACsuihx,idmap = idmap,id.var = "ID"))->ACsuihx
ACsuihx[which(ACsuihx$ifexist==T),]->ACsuihx
ACsuihx[c(2:5)]->ACsuihx
row.names(ACsuihx)<-NULL
#Merge and get vars
suihxrc %>% group_by(masterdemoid) %>% filter(row_number()==1)->suihxrc
data.frame(masterdemoid=suihxrc$masterdemoid,firstatt=suihxrc$firstattrc, maxleth=suihxrc$maxlethrc,
mldate=suihxrc$mldate)->suihxrc
data.frame(masterdemoid=ACsuihx$masterdemoid,firstatt=ACsuihx$ACfirstatt, maxleth=ACsuihx$ACmaxleth,
mldate=ACsuihx$oldml)->ACsuihx
rbind(ACsuihx,suihxrc)->lethandfirstatt
as.numeric(lethandfirstatt$maxleth)->lethandfirstatt$maxleth
View(lethandfirstatt)
ymd(lethandfirstatt$firstatt)->lethandfirstatt$firstatt
lethandfirstatt[which(!is.na(lethandfirstatt$firstatt) | !is.na(lethandfirstatt$maxleth)),]->lethandfirstatt
lethandfirstatt %>% group_by(masterdemoid) %>% mutate(fin1statt=min(firstatt))->lethandfirstatt
lethandfirstatt %>% group_by(masterdemoid) %>% mutate(finmaxleth=max(maxleth))->lethandfirstatt
lethandfirstatt[which(lethandfirstatt$maxleth==lethandfirstatt$maxleth),c("masterdemoid","mldate")]->finml
finml[!duplicated(finml$masterdemoid),]->finml
finml$mldate[match(lethandfirstatt$masterdemoid, finml$masterdemoid)]->lethandfirstatt$finmldate
lethandfirstatt$mldate[match(MCQwdemo$masterdemoid, lethandfirstatt$masterdemoid)]->MCQwdemo$mldate
#SIS
sis<-data.frame(ID=p2$data$registration_redcapid,date=p2$data$bq_date,
Event=p2$data$redcap_event_name, sis_score=p2$data$sis_max_total_s, sis_plan=p2$data$sis_max_planning_s)
View(sis)
#SIS
sis<-data.frame(ID=p2$data$registration_redcapid,date=p2$data$bq_date,sis_score=p2$data$sis_max_total_s, sis_plan=p2$data$sis_max_planning_s)
sis[which(!is.na(sis$sis_score)),]->sis
as.character(sis$ID)->sis$ID
as.Date(sis$date)->sis$date
date.match.sis<-function(x,y=MCQwdemo, id, cutoff){
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist),]->x}
y$mlatt[match(x$masterdemoid, y$masterdemoid)]->x$mlatt
x[which(!is.na(x$mlatt)),]->x
mutate(x, datedif=mlatt-date)->x
x$datedif<-as.numeric(x$datedif)
xb<-do.call(rbind,lapply(split(x,x$masterdemoid),function(xa){
xa[which.min(abs(as.numeric(xa$datedif))),]
}))
xb[which(abs(as.numeric(xb$datedif))<cutoff),]->xc
return(xc)
}
date.match.sis(x=sis,y=MCQwdemo, id=T, cutoff=90)
sis[which(!is.na(sis$sis_score)),]->sis
as.character(sis$ID)->sis$ID
as.Date(sis$date)->sis$date
date.match.sis(x=sis,y=MCQwdemo, id=T, cutoff=90)
is.Date(MCQwdemo$mlatt)
as.Date(MCQwdemo$mlatt)
ymd(MCQwdemo$mlatt)
as.character(MCQwdemo$mlatt)
as.character(MCQwdemo$mldate)
as.Date(MCQwdemo$mldate)
as.Date(MCQwdemo$mldate)->MCQwdemo$mldate
date.match.sis(x=sis,y=MCQwdemo, id=T, cutoff=90)
x=sis
y=MCQwdemo
id=T
cutoff=90
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist),]->x}
date.match.sis<-function(x,y=MCQwdemo, id, cutoff){
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist),]->x}
y$mldate[match(x$masterdemoid, y$masterdemoid)]->x$mldate
x[which(!is.na(x$mldate)),]->x
mutate(x, datedif=mldate-date)->x
x$datedif<-as.numeric(x$datedif)
xb<-do.call(rbind,lapply(split(x,x$masterdemoid),function(xa){
xa[which.min(abs(as.numeric(xa$datedif))),]
}))
xb[which(abs(as.numeric(xb$datedif))<cutoff),]->xc
return(xc)
}
date.match.sis(x=sis,y=MCQwdemo, id=T, cutoff=90)
date.match.sis(x=sis,y=MCQwdemo, id=T, cutoff=90)->sis
View(sis)
sis[c(2:5)]->sis
#Access
sisold<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SINT.csv")
View(sisold)
sisold %>% filter(TIMEFRM==1)
sisold %>% filter(TIMEFRM==1)->sisold
#Access
sisold<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SINT.csv")
unique(sisold$ID)
sum(table(unique(sisold$ID)))
sisold %>% filter(TIMEFRM==1)->sisold
sum(table(unique(sisold$ID)))
#Access
sisold<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SINT.csv")
sisold %>% filter(TIMEFRM!=9)->sisold
sum(table(unique(sisold$ID)))
sisold %>% filter(TIMEFRM!=9)->sisold
sisold %>% group_by(ID) %>% filter(TIMEFRM==max(TIMEFRM))
sisold %>% group_by(ID) %>% filter(TIMEFRM==max(TIMEFRM))->sisold
#Access
sisold<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SINT.csv")
sisold %>% filter(TIMEFRM!=9)->sisold
sisold %>% group_by(c(ID, CDATE)) %>% filter(TIMEFRM==max(TIMEFRM))->sisold
sisold %>% group_by(c(ID, CDATE))
sisold %>% group_by(ID, CDATE) %>% filter(TIMEFRM==max(TIMEFRM))->sisold
#Access
sisold<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SINT.csv")
sisold %>% filter(TIMEFRM!=9)->sisold
sisold[-which(rowMeans(is.na(sisold))>0.5),]->sisold
sisold %>% group_by(ID, CDATE) %>% filter(TIMEFRM==max(TIMEFRM))->sisold
rowSums(sisold[6:20])->sisold$score
sisold$Q8
?recode
recode(sisold$Q8, c(0,1,2))
recode(sisold$Q8, c(0=2,1=1,2=0))
recode(sisold$Q8, c(0==2,1==1,2==0))
recode(sisold$Q8, c("0=2","1=1","2=0"))
recode(sisold$Q8, "0"=2,"2"=0)
recode(sisold$Q8, "0"=2,"2"=0, "1"=1)
recode(sisold$Q8, "0"=2,"2"=0, "1"=1)->sisold$Q8
rowSums(sisold[6:20])->sisold$score
#Access
sisold<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SINT.csv")
sisold %>% filter(TIMEFRM!=9)->sisold
sisold[-which(rowMeans(is.na(sisold))>0.5),]->sisold
sisold %>% group_by(ID, CDATE) %>% filter(TIMEFRM==max(TIMEFRM))->sisold
recode(sisold$Q8, "0"=2,"2"=0, "1"=1)->sisold$Q8
rowSums(sisold[6:20])->sisold$score
rowSums(sisold[6:13])->sisold$planningsub
sisold$CDATE->sisold$date
date.match.sis(x=sisold, id=T, cutoff=90)->sisold
date.match.sis(x=sisold, y=MCQwdemo, id=T, cutoff=90)->sisold
x=sisold
y=MCQwdemo
id=T
cutoff=90
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist),]->x}
as.character(sisold$ID)->sisold$ID
date.match.sis(x=sisold, y=MCQwdemo, id=T, cutoff=90)->sisold
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist),]->x}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist)=T,]->x}
View(x)
is.data.frame(sisold)
sisold$CDATE
sisold$date
#Access
sisold<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SINT.csv")
sisold %>% filter(TIMEFRM!=9)->sisold
sisold[-which(rowMeans(is.na(sisold))>0.5),]->sisold
sisold %>% group_by(ID, CDATE) %>% filter(TIMEFRM==max(TIMEFRM))->sisold
recode(sisold$Q8, "0"=2,"2"=0, "1"=1)->sisold$Q8
as.character(sisold$ID)->sisold$ID
rowSums(sisold[6:20])->sisold$score
rowSums(sisold[6:13])->sisold$planningsub
sisold$CDATE->sisold$date
is.data.frame(sisold)
date.match.sis(x=sisold, y=MCQwdemo, id=T, cutoff=90)->sisold
as.data.frame(sisold)->sisold
date.match.sis(x=sisold, y=MCQwdemo, id=T, cutoff=90)->sisold
View(sisold)
sisold[c(49:52)]
sisold[c(49:52)]->sisold
View(ssiold)
View(sisold)
#Combine
sis<-data.frame(masterdemoid=sis$masterdemoid, date=sis$date, planningsub=sis$sis_plan,
score=sis$sis_score,stringsAsFactors = F)
rbind(sis,sisold)->SIS
date.match.sis(x=SIS, id=F, cutoff=90)->SIS
View(SIS)
xc[which(as.numeric(sx$datedif)<0),]
xc[which(as.numeric(sx$datedif)<0),]->xc
date.match.sis<-function(x,y=MCQwdemo, id, cutoff){
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist)=T,]->x}
y$mldate[match(x$masterdemoid, y$masterdemoid)]->x$mldate
x[which(!is.na(x$mldate)),]->x
mutate(x, datedif=mldate-date)->x
x$datedif<-as.numeric(x$datedif)
xb<-do.call(rbind,lapply(split(x,x$masterdemoid),function(xa){
xa[which.min(abs(as.numeric(xa$datedif))),]
}))
xb[which(abs(as.numeric(xb$datedif))<cutoff),]->xc
xc[which(as.numeric(xc$datedif)<0),]->xc
return(xc)
}
date.match.sis<-function(x,y=MCQwdemo, id, cutoff){
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist)=T,]->x}
y$mldate[match(x$masterdemoid, y$masterdemoid)]->x$mldate
x[which(!is.na(x$mldate)),]->x
mutate(x, datedif=mldate-date)->x
x$datedif<-as.numeric(x$datedif)
xb<-do.call(rbind,lapply(split(x,x$masterdemoid),function(xa){
xa[which.min(abs(as.numeric(xa$datedif))),]
}))
xb[which(abs(as.numeric(xb$datedif))<cutoff),]->xc
xc[which(as.numeric(xc$datedif)<0),]->xc
return(xc)
}
date.match.sis<-function(x,y=MCQwdemo, id, cutoff){
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist)=T,]->x}
y$mldate[match(x$masterdemoid, y$masterdemoid)]->x$mldate
x[which(!is.na(x$mldate)),]->x
mutate(x, datedif=mldate-date)->x
x$datedif<-as.numeric(x$datedif)
xb<-do.call(rbind,lapply(split(x,x$masterdemoid),function(xa){
xa[which.min(abs(as.numeric(xa$datedif))),]
}))
xb[which(abs(as.numeric(xb$datedif))<cutoff),]->xc
xc[which(as.numeric(xc$datedif)<0),]->xc
return(xc)
}
return(xd)
date.match.sis<-function(x,y=MCQwdemo, id, cutoff){
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist)=T,]->x}
y$mldate[match(x$masterdemoid, y$masterdemoid)]->x$mldate
x[which(!is.na(x$mldate)),]->x
mutate(x, datedif=mldate-date)->x
x$datedif<-as.numeric(x$datedif)
xb<-do.call(rbind,lapply(split(x,x$masterdemoid),function(xa){
xa[which.min(as.numeric(xa$datedif)),]
}))
xb[which(abs(as.numeric(xb$datedif))<cutoff),]->xc
return(xc)
}
xa[which.min(as.numeric(xa$datedif)),]
date.match.sis<-function(x,y=MCQwdemo, id, cutoff){
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist)=T,]->x}
y$mldate[match(x$masterdemoid, y$masterdemoid)]->x$mldate
x[which(!is.na(x$mldate)),]->x
mutate(x, datedif=mldate-date)->x
x$datedif<-as.numeric(x$datedif)
xb<-do.call(rbind,lapply(split(x,x$masterdemoid),function(xa){
xa[which.min(as.numeric(xa$datedif)),]
}))
xb[which(abs(as.numeric(xb$datedif))<cutoff),]->xc
return(xc)
}
date.match.ssi<-function(x,y=MCQwdemo, id, cutoff){
if(!is.Date(x$date)){as.Date(mdy(x$date))->x$date}
if(id){x<-bsrc.findid(x,idmap = idmap,id.var = "ID")
x[which(x$ifexist),]->x}
y$consentdate[match(x$masterdemoid, y$masterdemoid)]->x$consentdate
x[which(!is.na(x$consentdate)),]->x
mutate(x, datedif=consentdate-date)->x
x$datedif<-as.numeric(x$datedif)
xb<-do.call(rbind,lapply(split(x,x$masterdemoid),function(xa){
xa[which.min(abs(as.numeric(xa$datedif))),]
}))
xb[which(abs(as.numeric(xb$datedif))<cutoff),]->xc
return(xc)
}
date.match.sis(x=SIS, id=F, cutoff=90)->SIS
View(SIS)
SIS$score[match(MCQwdemo$masterdemoid, SIS$masterdemoid)]->MCQwdemo$max_sis_total
SIS$planningsub[match(MCQwdemo$masterdemoid, SIS$masterdemoid)]->MCQwdemo$max_plan_sub
#Make final df
Finaldf<-data.frame(ID=MCQwdemo$masterdemoid, Item=MCQwdemo$Item, Response=MCQwdemo$Response,
Immediate.magnitude=MCQwdemo$Immediate.magnitude, Delayed.magnitude=MCQwdemo$Delayed.magnitude,
Lenth.of.delay=MCQwdemo$Length.of.delay, Group=MCQwdemo$group, Age=MCQwdemo$bl.age, Gender=MCQwdemo$gender,
Race=MCQwdemo$race, Ethnicity=MCQwdemo$ethnicity, Education=MCQwdemo$edu, Marital.status=MCQwdemo$marital,
Income=MCQwdemo$income, ham17.score=MCQwdemo$ham17score, ham24.score=MCQwdemo$ham24score,
SSI.score=MCQwdemo$bl.SSIscore, SIS.score=MCQwdemo$max_sis_total, SIS.plansub=MCQwdemo$max_plan_sub,
mmse.score=MCQwdemo$mmse_score, drs.score=MCQwdemo$drs_score, wtar.score=MCQwdemo$wtar_score,
exit.score=MCQwdemo$exit_score, highest_lethality=MCQwdemo$mlatt, age.firstatt=MCQwdemo$age_1statt)
#####################################################
#Missing attempt lethality
unique(MCQwdemo[which(MCQwdemo$group=="ATT" & (is.na(MCQwdemo$mlatt) | is.na(MCQwdemo$firstatt))),"masterdemoid"  ])
#####################################################
#Missing attempt lethality
unique(MCQwdemo[which(MCQwdemo$group=="ATT" & (is.na(MCQwdemo$mlatt) | is.na(MCQwdemo$firstatt))),"masterdemoid"])->badids
#Access
ssiold1<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SIS_1.csv")
ssiold2<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SIS_2.csv")
#Access
ssiold1<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SIS_1.csv")
ssiold2<-read.csv(file = "C:/Users/buerkem/OneDrive - UPMC/Documents/Data pulls/MCQ/A_SIS_2.csv")
ssiold1$CDATE->ssiold1$date
ssiold2$CDATE->ssiold2$date
